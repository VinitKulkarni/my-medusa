############################
# Stage‚ÄØ1 ‚Äì‚ÄØDependencies
############################
FROM node:20-alpine AS build
WORKDIR /app

# 1Ô∏è‚É£ Copy dependency manifests first (takes advantage of layer caching)
COPY package*.json ./
RUN npm ci      # 2Ô∏è‚É£ Install NPM deps

# 3Ô∏è‚É£ Copy the rest of the source
COPY . .

############################
# Stage‚ÄØ2 ‚Äì‚ÄØRuntime image
############################
FROM node:20-alpine
WORKDIR /app

# 4Ô∏è‚É£ Copy the built workspace from Stage‚ÄØ1
COPY --from=build /app /app

# 5Ô∏è‚É£ Add a tiny entrypoint that:
#    ‚Ä¢ runs the migration with TLS disabled (useful when your RDS cert is self‚Äësigned)
#    ‚Ä¢ then hands control to whatever CMD was supplied
RUN printf '%s\n' \
    '#!/bin/sh' \
    'set -e' \
    'echo "üîÑ  Running Medusa DB migration‚Ä¶"' \
    'NODE_TLS_REJECT_UNAUTHORIZED=0 npx medusa db:migrate' \
    'echo "‚úÖ  Migration complete ‚Äî launching app"' \
    'exec "$@"' \
  > /usr/local/bin/docker-entrypoint.sh && \
  chmod +x /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT ["docker-entrypoint.sh"]

# 6Ô∏è‚É£ Expose the Medusa port
EXPOSE 9000

# 7Ô∏è‚É£ Default command (what docker-entrypoint.sh will ultimately exec)
CMD ["npm", "run", "dev"]
